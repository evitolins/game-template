#!/usr/bin/env bash

# Colors
# http://misc.flogisoft.com/bash/tip_colors_and_formatting
G="\033[1;32m" # Green
GY="\033[1;93m" # Gray
Y="\033[1;93m" # Yellow 
R="\033[1;31m" # Red
BLD="\033[1;1m" #BOLD
N="\033[0m" # ~reset~

CODE="\033[1;93;100m" # Fill Dark Gray
# Icons
icon_info="${BLD}\xE2\x84\xB9 INFO:${N}"
icon_positive="${G}\xE2\x9C\x94 SUCCESS:${N}"
icon_warning="${Y}\xE2\x9A\xA0 WARNING:${N}"
icon_negative="${R}\xE2\x9C\x98 FAILED:${N}"
icon_mugs="${Y}\xF0\x9F\x8D\xBB CHEERS!:${N}"



echo -e "${BLD}------------------------------------------------------${N}"
echo -e "${BLD}     Hack and Paint [UnityYAMLMerge Installation]     ${N}"
echo -e "${BLD}------------------------------------------------------${N}"

echo -e "${BLD}Install Git Merge Tools/Settings for Unity...${N}"
echo -e "- Now searching for available merge tool paths... (this may take a few seconds)"



# Detect OS
ROOT_SEARCH_PATHS=""
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Ask linux users to provide a root path
    echo -n -e "${BLD}Please enter a root path to search for your Unity application and press [ENTER]: ${N}"
    read ROOT_SEARCH_PATHS
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    ROOT_SEARCH_PATHS="/Applications"
# elif [[ "$OSTYPE" == "cygwin" ]]; then
#     # POSIX compatibility layer and Linux environment emulation for Windows
elif [[ "$OSTYPE" == "msys" ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW) & Windows GitBash
    # Search for available drives on GitBash Windows
    ROOT_SEARCH_PATHS=$(cat /proc/partitions | awk '{print $5}' | grep -e "[A-Z][:]" | tr ':\\' ' ' | sed -e "s/[[:space:]]\+/ /g" | awk '{print "\"/"$1"\""}' | tr '\n' ' ')
# elif [[ "$OSTYPE" == "win32" ]]; then
#     # I'm not sure this can happen.
# elif [[ "$OSTYPE" == "freebsd"* ]]; then
#     # ...
else
    echo -e "${icon_negative} "${OSTYPE}" is not a recognized OS"
fi


# Find available UnityYAMLMerge tool paths
COUNTER=0
declare -a FOUND_PATHS
echo ""
while read found_path
do
    FOUND_PATHS[$COUNTER]=${found_path}
    echo "  ${COUNTER}) ${found_path}"
    COUNTER=$((COUNTER + 1))
done< <(find $ROOT_SEARCH_PATHS -name "UnityYAMLMerge*" 2>/dev/null)
echo ""


# Ask user to choose path
echo -n -e "${BLD}Enter the number of the path you would like to use and press [ENTER]: ${N}"
read tool_path_index
CHOSEN_TOOL_PATH=${FOUND_PATHS[$tool_path_index]}
echo " - You've chosen the path \"$CHOSEN_TOOL_PATH\""


# Install Path Settings
if [[ -x ${FOUND_PATHS[$tool_path_index]} ]]
then
    echo -e " - Installing settings into your repo's local git config...${N}"
    git config --local merge.tool unityyamlmerge
    git config --local mergetool.unityyamlmerge.trustExitCode false
    git config --local mergetool.unityyamlmerge.keepTemporaries true
    git config --local mergetool.unityyamlmerge.keepBackup false
    git config --local mergetool.unityyamlmerge.path "${CHOSEN_TOOL_PATH}"
    git config --local mergetool.unityyamlmerge.cmd "\"${CHOSEN_TOOL_PATH}\" merge -p \"\$BASE\" \"\$REMOTE\" \"\$LOCAL\" \"\$MERGED\""
    git config --local mergetool.sourcetree.cmd "\"${CHOSEN_TOOL_PATH}\" merge -p \"\$BASE\" \"\$REMOTE\" \"\$LOCAL\" \"\$MERGED\""
    git config --local mergetool.sourcetree.trustexitcode true
    echo -e "${icon_positive} Install Complete!"
    # git config --local -l | grep -e "^merge"
else
    echo -e "${icon_negative} Given path was not executable."
fi
