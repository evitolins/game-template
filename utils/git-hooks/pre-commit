#!/usr/bin/env bash

# 
# git pre-commit hook
# 
# Summary:
# 
#     This script insures that files committed within your git/git-lfs repo are
#     properly handled.  This should block any activity which could 
#     accidentally commit large files directly within a git repo, and avoids
#     certain known issues with lfs behavior.
#
#
# Pre-Hook Checklist:
# 
#     0. Check if Bash version is supported
#     1. Check if Git version is supported
#     2. Check if LFS version is supported
#        - 2a. Require .gitattributes is being tracked, and changes committed
#        - 2b. Collect LFS Tracking Extensions
#        - 2c. Check if LFS hooks are properly installed
#        - 2d. Check repo history for previously committed/untracked files of
#              the newly tracked extensions
#          - Warn user that these changes probably require a REPO rebuild to
#            avoid future errors
#     3. Block files larger than X from being committed without using LFS
#        tracking
#     4. Check if files contain an uppercase extension
#         - 4a. if so, stop the commit and suggest renaming the files before
#               committing
#
#
# Helpful snippets:
#    git status --porcelain
#    git lfs status --porcelain
#
#
# Reference:
#    http://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommited-changes
#

# Success/Failure functions
commit_failure ()
{
    echo ""
    echo -e "${R}Your commit has failed. ${BLD}Please review the messages above for suggestions to fix the issues.${N}"
    echo ""
    exit 1
}

commit_success ()
{
    echo ""
    echo -e "${ICON_MUGS} ${G}Your commit was successful! ${BLD}Carry on my wayward son...${N}"
    echo ""
}



# Import Dependencies
#   - paths must be relative to the git repo's root path
DIR=$(git rev-parse --show-toplevel)
if [[ ! -d "$DIR" ]]
then
    echo "Error: Git repo was not found."
    commit_failure
else
    source "$DIR/utils/bash_utils"
fi


# File Size Limits
HARD_LIMIT=$(($MB*2))
SOFT_LIMIT=$(($MB*1))

# Gather Needed Data
REQUIRED_GIT_VERSION="2.10.2"
REQUIRED_LFS_VERSION="1.5.5"

lfsTrackedExts=""







echo -e "${BLD}------------------------------------------------------${N}"
echo -e "${BLD}              Hack and Paint [pre-commit]             ${N}"
echo -e "${BLD}------------------------------------------------------${N}"

# Check if this is the initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    # echo -e " About to create a new commit..."
    against=HEAD
else
    # echo -e " Hack and Paint [pre-commit]: About to create the first commit..."
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi



#######################################
# 1) Check if Git version is supported
echo -e "${BLD}1. Verify Git${N}"
# Check if git is installed
# Gather Env Data
user_git_version=$(git version | awk '{print $3}')
compare_git_version=$(vercomp $user_git_version $REQUIRED_GIT_VERSION)
state_git_version_ok=$( [ ! "$compare_git_version" -lt 2 ]; echo $? )

if [ -z "$user_git_version" ];
then
    echo -e "   $ICON_NEGATIVE git does not appear to be installed"
    commit_failure
fi  

# Check for required version
git_compare_string="$user_git_version $(vercomp_char $compare_git_version) $REQUIRED_GIT_VERSION"
if [ "$state_git_version_ok" == 1 ] ;
then
    echo -e "   $ICON_POSITIVE git is valid: $git_compare_string"
else
    echo -e "   $ICON_NEGATIVE git is not valid: $git_compare_string"
    commit_failure
fi



#######################################
# 2) Check if LFS is being used and version is supported
# If .gitattributes exists, collect all tracked extensions
# 
# We must check .gitattributes, even if it's not staged, as LFS will use
# .gitattributes as it exists in the working directory.
#    
# If new extentions are tracked with LFS, we need to verify that the repository
# does not have previous commits with files matching that extention (not
# tracked in LFS).  This will require extra attention, as the repo will
# continue to display errors, unless it's history is repaired (ie. BFG, etc.)
# TODO: Switch logic to use `git lfs track`
echo -e "${BLD}2. Verify Git-LFS${N}"
if [ ! -r ./.gitattributes ]
then
    echo -e "   $ICON_INFO .gitattributes missing. Skipping git-lfs requirements." 
    state_repo_uses_LFS=false
    lfsTrackedExts=""
else    
    # Gather Env Data
    user_lfs_version=$(git lfs version | awk '{print $1}' | awk -F '/' '{print $2}')
    compare_lfs_version=$(vercomp $user_lfs_version $REQUIRED_LFS_VERSION)
    state_lfs_version_ok=$( [ ! "$compare_lfs_version" -lt 2 ]; echo $? )

    echo -e "   $ICON_INFO .gitattributes is found. Repo requires git-lfs"
    # Check if git-lfs is installed
    if [ -z "$user_lfs_version" ];
    then
        echo -e "   $ICON_NEGATIVE git-lfs does not appear to be installed"
        commit_failure
    fi  
    # Check for required version
    lfs_compare_string="$user_lfs_version $(vercomp_char $compare_lfs_version) $REQUIRED_LFS_VERSION"
    if [ "$state_lfs_version_ok" == 1 ] ;
    then
        echo -e "   $ICON_POSITIVE git-lfs is valid: $lfs_compare_string" 
    else
        echo -e "   $ICON_NEGATIVE git-lfs is not valid: $lfs_compare_string"
        commit_failure
    fi

    #######################################
    # 2a) Require .gitattributes is being tracked
    #   This must be done to insure git-lfs is tracking based on a committed set
    #   of lfs rules.  Otherwise, the repo could get messy between team members.
    echo -e "${BLD}2a. Require .gitattributes is being tracked${N}"
    ga_filename=".gitattributes"
    added_files=$(list_new_or_modified_files)
    untracked_files=$(list_untracked_files)
    ga_is_untracked=""
    ga_is_added=""

    if `contains "$added_files" "$ga_filename"`;
        then
        ga_is_added="true"
    fi

    if `contains "$untracked_files" "$ga_filename"`;
        then
        ga_is_untracked="true"
    fi

    # Not tracked, or added
    if [[ $ga_is_untracked ]];
        then
        echo -e "   $ICON_NEGATIVE .gitattributes is present, but not yet being tracked"
        echo -e "   $ICON_INFO please run ${CODE} git add .gitattributes ${N} before committing your changes"
        commit_failure
    fi


    #######################################
    # 2b) Collect LFS Tracking Extensions
    #  NOTICE: This will probably break, if we start tracking directories, etc
    #  NOTICE: This also assumes there is only a .gitattributes in the root directory
    echo -e "${BLD}2b. Collect LFS Tracking Extensions${N}"
    state_repo_uses_LFS=true
    lfsTrackedExtsCount=$(grep "filter=lfs diff=lfs merge=lfs -text" .gitattributes |sed 's/\|/ /'| awk '{print $1}'| cut -d'.' -f 2 | wc -l| awk '{print $1}')
    lfsTrackedExtsArr=$(grep "filter=lfs diff=lfs merge=lfs -text" .gitattributes |sed 's/\|/ /'| awk '{print $1}'| cut -d'.' -f 2 | sort)
    lfsTrackedExts=$(grep "filter=lfs diff=lfs merge=lfs -text" .gitattributes |sed 's/\|/ /'| awk '{print $1}'| cut -d'.' -f 2 | sort | paste -sd "," -)
    echo -e "   $ICON_POSITIVE .gitattributes found"
    echo -e "      $ICON_INFO $lfsTrackedExtsCount tracked extensions found"
    # # Echo each extension
    # for i in $lfsTrackedExtsArr
    # do
    #    echo "      - $i"
    # done

    #######################################
    # 2c) Check if LFS hooks are properly installed
    # git lfs install
    echo -e "${BLD}2c. Check if LFS hooks are properly installed${N}"
    echo -e "   ${ICON_WARNING} This feature is currently disabled.${N}"


    #######################################
    # 2d) Check repo history for previously committed/untracked files of
    #     the newly tracked extensions
    #   - Warn user that these changes probably require a REPO rebuild to
    #     avoid future errors
    echo -e "${BLD}2d. Check repo history for previously committed/untracked files of the newly tracked extensions${N}"
    echo -e "   ${ICON_WARNING} This feature is currently disabled.${N}"

fi




#######################################
# 3) Block files larger than X from being committed without using LFS tracking
# 
#    Because the LFS-tracked file size returned is actually the size of the
#    pointer file instead.  You can assume any file size listed over ~130b is
#    not being tracked.
#
hard_limit_human=$(echo $HARD_LIMIT| awk '{ foo = $1 / 1024 / 1024 ; print foo "MB" }')
echo -e "${BLD}3. Block files larger than ${hard_limit_human} from being committed without using LFS tracking${N}"
list_new_or_modified_files | check_file_size ${HARD_LIMIT} ${SOFT_LIMIT}
files_too_large=$?

# TODO: Add code examples to track all blocked extensions

if [ $files_too_large -gt 0 ]; then
    commit_failure
fi



#######################################
# 4) Check if files contain an uppercase extension
#     - 4a. if so, stop the commit and suggest renaming the files before committing
echo -e "${BLD}4. Check if files contain an uppercase extension${N}"
while read status_feed
do
    f=$(echo $status_feed | awk '{print $2}')
    filename=$(basename "$f")
    ext="${filename##*.}"
    filename="${filename%.*}"
    path_no_extension="${f%.*}"
    ext_lowercase=$(echo "$ext" | awk '{print tolower($0)}')
    if [[ $ext =~ [A-Z] ]] ;
    then
        echo -e "   $ICON_NEGATIVE $f can not have an uppercase file extension." 
        echo -e "      $ICON_INFO please rename using ${CODE} git mv $f ${path_no_extension}.${ext_lowercase} ${N}" 
        commit_failure
    fi
done < <(git lfs status --porcelain)



#######################################
# SUCCESS
commit_success





# BLOCK COMMIT SUCCESS FOR TESTING
# echo -e "p.s. - Just kidding, commit success is disabled for testing.\n"; exit 1;
